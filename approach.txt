








1. Parse scene
2. Create objects
3. Define scene bounds based on objects
4. 



Notes:
- We will not be directly rendering our objects as we did in FdF, as in they will not be converted to pixel coords
	and then displayed.
- Instead we will be calculating each pixel of the output image using the raytracing algorithm

- We will trace one ray per pixel, and only the ray that is perfectly perpendicular to the image plane will be seen.
- A ray hitting a single pixel will set the colour and brightness of that pixel.

- Backward raytracing is the technique we will use, as it is much more efficient

- We send one ray from each pixel out in a straight line. If it hits an object, we calculate the colour and brightness by 
	casting a light ray (or shadow ray) from the hit point to the light source of the scene.
- If the light ray's path to the point light is blocked by another object, we know that the point is in shadow. In this case
	it would not receive any illumination from the point source, and its brightness would be the ambient light.

- The original ray cast from the camera is the primary ray, camera ray, or visibility ray.

- The rays are not actually cast perpendicular from the image plane, but rather from the image focal point, passing through
	the center of each pixel on the image plane, this gives us perspective and FOV.

- If a ray will intersect multiple objects, the one that is closest to its originating point will be selected to calculate
	an intersection and bounce.

- 


